# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'vagrant-openstack-plugin'
require 'uri'

OS_TENANTNAME=ENV["OS_TENANT_NAME"]
OS_ENDPOINT=URI.parse(ENV["OS_AUTH_URL"]).host
# instead of doing :auto for floats which would require DNS lookups to build a cluster.txt
# simply require the user to provide them here
FLOATING_IP_1="1.2.3.4"
FLOATING_IP_2="1.2.3.5"
FLOATING_IP_3="1.2.3.6"
FLOATING_IP_4="1.2.3.7"

# these rules come from bcpc::powerdns SQL function dns_name
def munge_hostname(hostname)
  return hostname.downcase.
         gsub('&', 'and').
         gsub('_','-').
         gsub(' ','-').
         gsub('.','-')
end

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.
  config.vm.synced_folder "vagrant_ssh", "/home/ubuntu/.ssh/", type: "rsync"

  vm_settings = Proc.new { |os|
     os.username     = ENV["OS_USERNAME"]          # e.g. "#{ENV['OS_USERNAME']}"
     os.api_key      = ENV["OS_PASSWORD"]           # e.g. "#{ENV['OS_PASSWORD']}"
     os.flavor       = /r1.large/                # Regex or String
     os.image        = /Ubuntu 12.04.2 LTS/                 # Regex or String
     os.endpoint     = "https://#{OS_ENDPOINT}:5000/v2.0/tokens"      # e.g. "#{ENV['OS_AUTH_URL']}/tokens"
     os.keypair_name = "Vagrant-Test"      # as stored in Nova
     os.ssh_username = "ubuntu"           # login for the VM

     os.security_groups    = ['Hadoop-Security-Group']    # optional
     os.tenant             = OS_TENANTNAME
  }

  config.vm.define :bcpcchef do |bcpcchef|
    hostname="BCPC-Chef"
    bcpcchef.ssh.private_key_path = "vagrant_ssh/id_rsa"

  # Every Vagrant virtual environment requires a box to build off of.
    bcpcchef.vm.box = "dummy"
    raise ArgumentError, 'hostnames longer than 64 characters not permitted per https://docs.getchef.com/server_security.html' if "#{hostname}.#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}".length > 64
    bcpcchef.vm.hostname = "#{hostname}.#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}"
    bcpcchef.vm.provider :openstack do |os|
     vm_settings.call(os)
     os.server_name = hostname
     os.floating_ip        = FLOATING_IP_1
     os.flavor       = /m1.medium/
    end

    # spoof having a vagrant homedir
    bcpcchef.vm.provision :shell, :inline => "sudo ln -s /home/ubuntu /home/vagrant; sudo ln -s /vagrant /home/ubuntu/chef-bcpc" 
    # clean up /etc/hosts to have correct IP address
    bcpcchef.vm.provision :shell, :inline => "sudo sed -i \"s/127.0.1.1/$(ip addr show dev eth0 scope global |grep 'inet '|sed -e 's/.* inet //' -e 's#/.*##'|tail -1)/\" /etc/hosts"
    # clean up Chef environment to have correct IP address for bootstrap server, float and mgmt vips
    bcpcchef.vm.provision :shell, :inline => "sed -i \"s/\(10.0.100.3\|10.0.100.5\|192.168.100.5\)/$(ip addr show dev eth0 scope global |grep 'inet '|sed -e 's/.* inet //' -e 's#/.*##'|tail -1)/\" chef-bcpc/environments/Test-Laptop.json"
    # build required binaries
    bcpcchef.vm.provision :shell, :inline => "cd chef-bcpc && source proxy_setup.sh && sudo -E ./build_bins.sh || echo '##### Build_bins Failed'"
    # bootstrap the chef server
    bcpcchef.vm.provision :shell, :inline => "cd chef-bcpc && source proxy_setup.sh && ln -s /bin/true rsync; export PATH=.:${PATH} ; ./bootstrap_chef.sh --vagrant-local $(ip addr show dev eth0 scope global | grep 'inet '|sed -e 's/.* inet //' -e 's#/.*##'|tail -1)" 
    bcpcchef.vm.provision :shell, :inline => "cd chef-bcpc && source proxy_setup.sh && ln -s /bin/true rsync; export PATH=.:${PATH} ; ./bootstrap_chef.sh --vagrant-local $(ip addr show dev eth0 scope global | grep 'inet '|sed -e 's/.* inet //' -e 's#/.*##'|tail -1)" 
    build_cluster_txt = <<-EOH
    cd chef-bcpc
    rm cluster.txt
    echo "BCPC-1	-	#{FLOATING_IP_2}	-	#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}	role[BCPC-Hadoop-Head-Namenode-NoHA],role[BCPC-Hadoop-Head-HBase]" >> cluster.txt
    echo "BCPC-2	-	#{FLOATING_IP_3}	-	#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}	role[BCPC-Hadoop-Head-Namenode-Standby],role[BCPC-Hadoop-Head-MapReduce],role[BCPC-Hadoop-Head-Hive]" >> cluster.txt
    echo "BCPC-3	-	#{FLOATING_IP_4}	-	#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}	role[BCPC-Hadoop-Worker]" >> cluster.txt
    ./cluster-assign-roles.sh Test-Laptop hadoop
    EOH
    bcpcchef.vm.provision :shell, :inline => "#{build_cluster_txt}"
  end

  config.vm.define :bcpc1 do |bcpc1|
    hostname="BCPC-1"
    bcpc1.ssh.private_key_path = "vagrant_ssh/id_rsa"

  # Every Vagrant virtual environment requires a box to build off of.
    bcpc1.vm.box = "dummy"
    bcpc1.vm.hostname = "#{hostname}.#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}"
    bcpc1.vm.provider :openstack do |os|
     vm_settings.call(os)
     os.server_name = hostname
     os.floating_ip        = FLOATING_IP_2
     os.disks	= [{"name" => "#{hostname} disk 1", "description" => "Chef-BCPC Disk", "size" => 50},
                  {"name" => "#{hostname} disk 2", "description" => "Chef-BCPC Disk", "size" => 10}]
    end
  end

  config.vm.define :bcpc2 do |bcpc2|
    hostname="BCPC-2"
    bcpc2.ssh.private_key_path = "vagrant_ssh/id_rsa"

  # Every Vagrant virtual environment requires a box to build off of.
    bcpc2.vm.box = "dummy"
    bcpc2.vm.hostname = "#{hostname}.#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}"
    bcpc2.vm.provider :openstack do |os|
     vm_settings.call(os)
     os.server_name = hostname
     os.floating_ip        = FLOATING_IP_3
     os.disks	= [{"name" => "#{hostname} disk 1", "description" => "Chef-BCPC Disk", "size" => 10},
                  {"name" => "#{hostname} disk 2", "description" => "Chef-BCPC Disk", "size" => 10}]
    end
  end

  config.vm.define :bcpc3 do |bcpc3|
    hostname="BCPC-3"
    bcpc3.ssh.private_key_path = "vagrant_ssh/id_rsa"

  # Every Vagrant virtual environment requires a box to build off of.
    bcpc3.vm.box = "dummy"
    bcpc3.vm.hostname = "#{hostname}.#{munge_hostname(OS_TENANTNAME)}.#{OS_ENDPOINT}"
    bcpc3.vm.provider :openstack do |os|
     vm_settings.call(os)
     os.server_name = hostname
     os.floating_ip        = FLOATING_IP_4
     os.disks	= [{"name" => "#{hostname} disk 1", "description" => "Chef-BCPC Disk", "size" => 10},
                  {"name" => "#{hostname} disk 2", "description" => "Chef-BCPC Disk", "size" => 10}]
    end
  end

  config.ca_certificates.enabled = false
  config.ca_certificates.certs = [ ]

end
